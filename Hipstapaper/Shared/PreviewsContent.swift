//
//  Created by Jeffrey Bergier on 2020/11/30.
//
//  Copyright Â© 2020 Saturday Apps.
//
//  This file is part of Hipstapaper.
//
//  Hipstapaper is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  Hipstapaper is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with Hipstapaper.  If not, see <http://www.gnu.org/licenses/>.
//

#if DEBUG

import Datum

var p_query = Query()

let p_tags: AnyList<AnyElementObserver<AnyTag>> = {
    let date1 = Date(timeIntervalSinceNow: -700)
    let date2 = Date(timeIntervalSinceNow: 0)
    let tag1 = P_Tag(name: "Videos", websitesCount: 1, dateCreated: date1, dateModified: date1, id: .init(NSString("A")))
    let tag2 = P_Tag(name: "Japan", websitesCount: 20, dateCreated: date2, dateModified: date2, id: .init(NSString("B")))
    let tag3 = P_Tag(name: nil, websitesCount: 40000, dateCreated: date2, dateModified: date2, id: .init(NSString("C")))
    let element1 = AnyElementObserver(P_Element(AnyTag(tag1)))
    let element2 = AnyElementObserver(P_Element(AnyTag(tag2)))
    let element3 = AnyElementObserver(P_Element(AnyTag(tag3)))
    let collection = [element1, element2, element3]
    return AnyList(collection)
}()

let p_sites: P_Observer<AnyList<AnyElementObserver<AnyWebsite>>> = {
    return P_Observer(pp_sites)
}()

let pp_sites: AnyList<AnyElementObserver<AnyWebsite>> = {
    let date1 = Date(timeIntervalSinceNow: -700)
    let date2 = Date(timeIntervalSinceNow: 0)
    let site1 = P_Website(.init(title: "Google.com", resolvedURL: URL(string: "https://www.google.com")!),
                          dateCreated: date1,
                          dateModified: date2,
                          id: .init(NSString("A")))
    let site2 = P_Website(.init(title: "Apple.com", originalURL: URL(string: "https://www.apple.com")!, isArchived: true),
                          dateCreated: date2,
                          dateModified: date1,
                          id: .init(NSString("B")))
    let site3 = P_Website(.init(originalURL: URL(string: "https://www.microsoft.com")!, thumbnail: fakeImageData),
                          dateCreated: date1,
                          dateModified: date2,
                          id: .init(NSString("C")))
    return AnyList([
        AnyElementObserver(P_Element(AnyWebsite(site1))),
        AnyElementObserver(P_Element(AnyWebsite(site2))),
        AnyElementObserver(P_Element(AnyWebsite(site3)))
    ])
}()


struct P_Tag: Tag {
    var name: String?
    var websitesCount: Int?
    var dateCreated: Date
    var dateModified: Date
    var id: ObjectIdentifier
}

struct P_Website: Website {
    var isArchived: Bool
    var originalURL: URL?
    var resolvedURL: URL?
    var preferredURL: URL? { self.resolvedURL ?? self.originalURL }
    var title: String?
    var thumbnail: Data?
    var dateCreated: Date
    var dateModified: Date
    var id: ObjectIdentifier
    
    init(_ raw: AnyWebsite.Raw, dateCreated: Date, dateModified: Date, id: ObjectIdentifier) {
        self.isArchived = raw.isArchived ?? false
        self.originalURL = raw.originalURL ?? nil
        self.resolvedURL = raw.resolvedURL ?? nil
        self.title = raw.title ?? nil
        self.thumbnail = raw.thumbnail ?? nil
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.id = id
    }
}

class P_Element<T>: ElementObserver {
    
    typealias Value = T
    var value: T
    var isDeleted: Bool = false
    init(_ value: T) {
        self.value = value
    }
    static func == (lhs: P_Element<T>, rhs: P_Element<T>) -> Bool { fatalError() }
    func hash(into hasher: inout Hasher) { fatalError() }
}

class P_Controller: Controller {
    static var storeDirectoryURL: URL { fatalError() }
    static var storeExists: Bool = true
    var syncMonitor: AnySyncMonitor = AnySyncMonitor(NoSyncMonitor())
    func createWebsite(_ raw: AnyWebsite.Raw) -> Result<AnyElementObserver<AnyWebsite>, Datum.Error>
    { log.debug("Create Site: \(raw)"); return .success(pp_sites.first!) }
    func readWebsites(query: Query) -> Result<AnyListObserver<AnyList<AnyElementObserver<AnyWebsite>>>, Datum.Error>
    { log.debug("Read Websites, with: \(query)"); return .success(AnyListObserver(p_sites)) }
    func update(_ site: Set<AnyElementObserver<AnyWebsite>>, _ raw: AnyWebsite.Raw) -> Result<Void, Datum.Error>
    { log.debug("Update: \(site), with: \(raw)"); return .success(()) }
    func delete(_ site: Set<AnyElementObserver<AnyWebsite>>) -> Result<Void, Datum.Error>
    {
        log.debug("Delete: \(site)");
        p_sites.objectWillChange.send()
        p_sites.data = AnyList(p_sites.data.dropLast())
        return .success(())
    }
    func createTag(name: String?) -> Result<AnyElementObserver<AnyTag>, Datum.Error>
    { log.debug("Create Tag: \(String(describing: name))"); return .success(p_tags.first!) }
    func readTags() -> Result<AnyListObserver<AnyList<AnyElementObserver<AnyTag>>>, Datum.Error>
    { log.debug("Read Tags"); return .success(AnyListObserver(P_Observer(p_tags))) }
    func update(_ tag: AnyElementObserver<AnyTag>, name: Optional<String?>) -> Result<Void, Datum.Error>
    { log.debug("Update: \(tag) with: \(String(describing:name))"); return .success(()) }
    func delete(_ tag: AnyElementObserver<AnyTag>) -> Result<Void, Datum.Error>
    { log.debug("Delete: \(tag)"); return .success(()) }
    func add(tag: AnyElementObserver<AnyTag>, to websites: Set<AnyElementObserver<AnyWebsite>>) -> Result<Void, Datum.Error>
    { log.debug("Apply Tag: \(tag), to: \(websites)"); return .success(()) }
    func remove(tag: AnyElementObserver<AnyTag>, from websites: Set<AnyElementObserver<AnyWebsite>>) -> Result<Void, Datum.Error>
    { log.debug("Remove Tag: \(tag), from: \(websites)"); return .success(()) }    
    func tagStatus(for websites: Set<AnyElementObserver<AnyWebsite>>) -> Result<AnyList<(AnyElementObserver<AnyTag>, ToggleState)>, Datum.Error> {
        return .success(AnyList(MappedList(p_tags, transform: { _ in .on })))
    }
}

class P_Observer<T: RandomAccessCollection>: ListObserver {
    var data: T
    init(_ list: T) {
        self.data = list
    }
}

private let fakeImageData: Data = {
    let base64 = ""
    return Data(base64Encoded: base64)!
}()

#endif
